<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Personal Expense Tracker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-image: url('https://resources.tallysolutions.com/us/wp-content/uploads/2021/11/cogs-vs-expenses-whats-the-difference.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            color: #333;
        }
        .navbar {
            background-color: rgba(51, 51, 51, 0.8);
            color: white;
            padding: 10px;
            text-align: center;
            position: fixed;
            top: 0;
            width: 100%;
            z-index : 10;
        }
        .navbar a {
            color: white;
            text-decoration: none;
            padding: 10px;
        }
        .navbar a:hover {
            background-color: #575757;
        }
        .container {
            max-width: 800px;
            margin: 80px auto;
            padding: 20px;
            border: 1px solid #ddd;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        label, input, button {
            display: block;
            margin: 10px 0;
            width: 100%;
            padding: 12px;
            border-radius: 4px;
            box-sizing: border-box;
        }
        input[type="text"], input[type="password"], input[type="number"], input[type="date"] {
            border: 2px solid #ddd;
            transition: border-color 0.3s ease;
        }
        input[type="text"]:focus, input[type="password"]:focus, input[type="number"]:focus, input[type="date"]:focus {
            border-color: #007bff;
            outline: none;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
        }
        button:hover {
            background-color: #0056b3;
        }
        button:active {
            background-color: #00408f;
        }
        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
        }
        th, td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }
        th {
            background-color: #f1f1f1;
            font-weight: bold;
        }
        h1, h2 {
            color: #333;
        }
        p {
            color: #555;
        }
        .hidden {
            display: none;
        }

        /* Mobile Responsive */
        @media (max-width: 600px) {
            .navbar {
                text-align: left;
                padding: 5px;
            }
            .container {
                margin: 20px;
                padding: 15px;
            }
            input, button {
                font-size: 14px;
            }
        }
    </style>
</head>
<body>

    <div id="navbar" class="navbar hidden">
        <a href="javascript:void(0);" onclick="showPage('home')">Home</a>
        <a href="javascript:void(0);" onclick="showPage('income')">Set Income</a>
        <a href="javascript:void(0);" onclick="showPage('expense')">Track Expenses</a>
        <a href="javascript:void(0);" onclick="showPage('summary')">Summary</a>
        <a href="javascript:void(0);" onclick="logout()">Logout </a>
    </div>

    <div id="home" class="container">
        <h1>Welcome to the Personal Expense Tracker!</h1>
        <p>Please log in to start tracking your expenses.</p>
        <button onclick="showPage('login')">Login</button>
    </div>

    <div id="register" class="container hidden">
        <h2>Register</h2>
        <form id="registrationForm">
            <label for="username">Username:</label>
            <input type="text" id="username" required>
            <label for="password">Password:</label>
            <input type="password" id="password" required>
            <button type="button" onclick="registerUser ()">Register</button>
        </form>
        <p>Already have an account? <a href="javascript:void(0);" onclick="showPage('login')">Login here</a></p>
    </div>

    <div id="login" class="container hidden">
        <h2>Login</h2>
        <form id="loginForm">
            <label for="loginUsername">Username:</label>
            <input type="text" id="loginUsername" required>
            <label for="loginPassword">Password:</label>
            <input type="password" id="loginPassword" required>
            <button type="button" onclick="loginUser ()">Login</button>
        </form>
        <p>Don't have an account? <a href="javascript:void(0);" onclick="showPage('register')">Register here</a></p>
    </div>

    <div id="income" class="container hidden">
        <h2>Set Monthly Income</h2>
        <form id="incomeForm">
            <label for="salary">Monthly Salary (INR):</label>
            <input type="number" id="salary" required>
            <label for="otherIncome">Other Income (Optional):</label>
            <input type="number" id="otherIncome">
            <button type="button" onclick="setIncome()">Set Income</button>
        </form>
    </div>

    <div id="expense" class="container hidden">
        <h2>Track Your Expenses</h2>
        <form id="expenseForm">
            <label for="date">Date:</label>
            <input type="date" id="date" required>
            <label for="expenseName">Expense Name:</label>
            <input type="text" id="expenseName" required>
            <label for="expenseAmount">Amount (INR):</label>
            <input type="number" id="expenseAmount" required>
            <label for="expenseCategory">Category:</label>
            <select id="expenseCategory" required>
                <option value="">Select Category</option>
                <option value="Food">Food</option>
                <option value="Transport">Transport</option>
                <option value="Utilities">Utilities</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Other">Other</option>
            </select>
            <button type="button" onclick="addExpense()">Add Expense</button>
        </form>

        <h3>Expense List</h3>
        <table id="expenseTable">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Expense Name</th>
                    <th>Amount (INR)</th>
                    <th>Category</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div id="summary" class="container hidden">
        <h2>Expense Summary</h2>
        <p><strong>Total Income: </strong><span id="totalIncome">0.00</span></p>
        <p><strong>Total Expenses: </strong><span id="totalExpenses">0.00</span></p>
        <p><strong>Remaining Balance: </strong><span id="remainingBalance">0.00</span></p>
        <h3>Expenses by Category</h3>
        <ul id="categorySummary"></ul>
    </div>

    <script>
        const API_URL = 'http://localhost:5000'; // Adjust if your server runs on a different port

        function showPage(page) {
            const pages = document.querySelectorAll('.container');
            pages.forEach(p => p.classList.add('hidden'));
            document.getElementById(page).classList.remove('hidden');
        }

        async function registerUser () {
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            if (username && password) {
                const response = await fetch(`${API_URL}/register`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });
                if (response.ok) {
                    alert("User  registered successfully!");
                    showPage('login');
                } else {
                    alert("Error registering user.");
                }
            } else {
                alert("Please fill in all fields.");
            }
        }

        async function loginUser () {
            const username = document.getElementById('loginUsername').value;
            const password = document.getElementById('loginPassword').value;

            const response = await fetch(`${API_URL}/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });
            if (response.ok) {
                const { token } = await response.json();
                localStorage.setItem('token', token);
                alert("Login successful!");
                showPage('income');
                document.getElementById('navbar').classList.remove('hidden');
                loadIncome();
                loadExpenses();
            } else {
                alert("Invalid credentials.");
            }
        }

        async function setIncome() {
            const salary = document.getElementById('salary').value;
            const otherIncome = document.getElementById('otherIncome').value || 0;

            if (salary) {
                const token = localStorage.getItem('token');
                const response = await fetch(`${API_URL}/income`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ salary: parseFloat(salary), otherIncome: parseFloat(other Income) });
                if (response.ok) {
                    alert("Income set successfully!");
                    showPage('expense');
                } else {
                    alert("Error setting income.");
                }
            } else {
                alert("Please enter your salary.");
            }
        }

        async function addExpense() {
            const date = document.getElementById('date').value;
            const expenseName = document.getElementById('expenseName').value;
            const expenseAmount = document.getElementById('expenseAmount').value;
            const expenseCategory = document.getElementById('expenseCategory').value;
            const token = localStorage.getItem('token');
            const userId = jwt_decode(token).id; // Decode token to get user ID

            if (date && expenseName && expenseAmount && expenseCategory) {
                const response = await fetch(`${API_URL}/expenses`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ userId, date, expenseName, expenseAmount: parseFloat(expenseAmount), category: expenseCategory })
                });
                if (response.ok) {
                    alert("Expense added successfully!");
                    loadExpenses();
                } else {
                    alert("Error adding expense.");
                }
            } else {
                alert("Please fill in all fields.");
            }
        }

        async function loadExpenses() {
            const token = localStorage.getItem('token');
            const userId = jwt_decode(token).id; // Decode token to get user ID
            const response = await fetch(`${API_URL}/expenses/${userId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const expenses = await response.json();
            const expenseTableBody = document.querySelector('#expenseTable tbody');
            expenseTableBody.innerHTML = '';
            let totalExpenses = 0;

            expenses.forEach(expense => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${new Date(expense.date).toLocaleDateString()}</td>
                    <td>${expense.expenseName}</td>
                    <td>${expense.expenseAmount.toFixed(2)}</td>
                    <td>${expense.category}</td>
                `;
                expenseTableBody.appendChild(row);
                totalExpenses += expense.expenseAmount;
            });

            document.getElementById('totalExpenses').innerText = totalExpenses.toFixed(2);
            updateSummary();
        }

        async function updateSummary() {
            const token = localStorage.getItem('token');
            const userId = jwt_decode(token).id; // Decode token to get user ID
            const response = await fetch(`${API_URL}/income/${userId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const incomeData = await response.json();
            const totalIncome = incomeData.salary + (incomeData.otherIncome || 0);
            const totalExpenses = parseFloat(document.getElementById('totalExpenses').innerText);
            const remainingBalance = totalIncome - totalExpenses;

            document.getElementById('totalIncome').innerText = totalIncome.toFixed(2);
            document.getElementById('remainingBalance').innerText = remainingBalance.toFixed(2);
            loadCategorySummary();
        }

        async function loadCategorySummary() {
            const token = localStorage.getItem('token');
            const userId = jwt_decode(token).id; // Decode token to get user ID
            const response = await fetch(`${API_URL}/expenses/${userId}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const expenses = await response.json();
            const categorySummary = {};

            expenses.forEach(expense => {
                if (!categorySummary[expense.category]) {
                    categorySummary[expense.category] = 0;
                }
                categorySummary[expense.category] += expense.expenseAmount;
            });

            const categorySummaryList = document.getElementById('categorySummary');
            categorySummaryList.innerHTML = '';
            for (const category in categorySummary) {
                const listItem = document.createElement('li');
                listItem.innerText = `${category}: ${categorySummary[category].toFixed(2)}`;
                categorySummaryList.appendChild(listItem);
            }
        }

        function logout() {
            localStorage.removeItem('token');
            document.getElementById('navbar').classList.add('hidden');
            showPage('home');
        }
    </script>
</body>
</html>
